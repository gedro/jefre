on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      version:
        required: true
        type: string

defaults:
  run:
    working-directory: backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Build application
        run: mvn clean package --projects :${{ inputs.service }}-core --also-make --batch-mode -e

      - name: Login to docker hub
        run: echo ${{secrets.DOCKER_PASSWORD}} | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Delete old image
        run: docker rmi -f ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }} 2>/dev/null || true

      - name: Delete dangling images
        run: |
          if [ -n "$(docker images -f "dangling=true" -q)" ]; then
            docker rmi -f $(docker images -f "dangling=true" -q)
          else
            echo "No dangling images to delete."
          fi

      - name: Build docker image
        run: docker build . --build-arg JAR_FILE=services/${{ inputs.service }}-core/target/app.jar -t ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }} --file services/Dockerfile

      - name: Publish image to docker hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }}

  deploy:
    needs: build
    runs-on: [jefree-backend-aws-ec2]
    steps:
      - name: Login to docker hub
        run: echo ${{secrets.DOCKER_PASSWORD}} | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Initialize docker swarm
        run: |
          if ! docker info | grep -q "Swarm: active"; then
            docker swarm init
          else
            echo "Swarm is already initialized."
          fi

      - name: Remove old service
        run: docker service rm jefree-backend-container 2>/dev/null || true

      - name: Delete old container
        run: docker rm -f jefree-backend-container

      - name: Delete old image
        run: |
          sleep 5
          docker rmi -f ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }} 2>/dev/null || true

      - name: Delete dangling images
        run: |
          if [ -n "$(docker images -f "dangling=true" -q)" ]; then
            docker rmi -f $(docker images -f "dangling=true" -q)
          else
            echo "No dangling images to delete."
          fi

      - name: Delete docker secrets
        run: |
          docker secret rm JEFREE_JWT_SECRET 2>/dev/null || true
          docker secret rm JEFREE_DATABASE_HOST 2>/dev/null || true
          docker secret rm JEFREE_DATABASE_USER 2>/dev/null || true
          docker secret rm JEFREE_DATABASE_PASSWORD 2>/dev/null || true
          docker secret rm JEFREE_GITHUB_CLIENT_ID 2>/dev/null || true
          docker secret rm JEFREE_GITHUB_CLIENT_SECRET 2>/dev/null || true
          docker secret rm JEFREE_GOOGLE_CLIENT_ID 2>/dev/null || true
          docker secret rm JEFREE_GOOGLE_CLIENT_SECRET 2>/dev/null || true
          docker secret rm JEFREE_GOOGLE_REFRESH_TOKEN 2>/dev/null || true
          docker secret rm JEFREE_GOOGLE_FROM_EMAIL 2>/dev/null || true
          docker secret rm JEFREE_FRONTEND_URL 2>/dev/null || true

      - name: Pull Image from docker hub
        run: docker pull ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }}

      - name: Create docker secret JEFREE_JWT_SECRET
        run: |
          echo ${{secrets.JEFREE_JWT_SECRET}} | docker secret create JEFREE_JWT_SECRET -
          echo ${{secrets.JEFREE_DATABASE_HOST}} | docker secret create JEFREE_DATABASE_HOST -
          echo ${{secrets.JEFREE_DATABASE_USER}} | docker secret create JEFREE_DATABASE_USER -
          echo ${{secrets.JEFREE_DATABASE_PASSWORD}} | docker secret create JEFREE_DATABASE_PASSWORD -
          echo ${{secrets.JEFREE_GITHUB_CLIENT_ID}} | docker secret create JEFREE_GITHUB_CLIENT_ID -
          echo ${{secrets.JEFREE_GITHUB_CLIENT_SECRET}} | docker secret create JEFREE_GITHUB_CLIENT_SECRET -
          echo ${{secrets.JEFREE_GOOGLE_CLIENT_ID}} | docker secret create JEFREE_GOOGLE_CLIENT_ID -
          echo ${{secrets.JEFREE_GOOGLE_CLIENT_SECRET}} | docker secret create JEFREE_GOOGLE_CLIENT_SECRET -
          echo ${{secrets.JEFREE_GOOGLE_REFRESH_TOKEN}} | docker secret create JEFREE_GOOGLE_REFRESH_TOKEN -
          echo ${{secrets.JEFREE_GOOGLE_FROM_EMAIL}} | docker secret create JEFREE_GOOGLE_FROM_EMAIL -
          echo ${{secrets.JEFREE_FRONTEND_URL}} | docker secret create JEFREE_FRONTEND_URL -

      - name: Run docker container
        run: |
          docker service create -d -p 80:8080 \
            --name jefree-backend-container \
            --with-registry-auth \
            --secret JEFREE_JWT_SECRET \
            --secret JEFREE_DATABASE_HOST \
            --secret JEFREE_DATABASE_USER \
            --secret JEFREE_DATABASE_PASSWORD \
            --secret JEFREE_GITHUB_CLIENT_ID \
            --secret JEFREE_GITHUB_CLIENT_SECRET \
            --secret JEFREE_GOOGLE_CLIENT_ID \
            --secret JEFREE_GOOGLE_CLIENT_SECRET \
            --secret JEFREE_GOOGLE_REFRESH_TOKEN \
            --secret JEFREE_GOOGLE_FROM_EMAIL \
            --secret JEFREE_FRONTEND_URL \
            ${{secrets.DOCKER_USERNAME}}/${{ inputs.service }}:${{ inputs.version }}